#lang ivy1.8

# A model of a liquidity pool
# To start with, let's just define basic operations and prove that the balances in the liquidity-pool state match the balances in the token contract state.

include pool_token

instance token_a : token
instance token_b : token
instance token_s : token

isolate pool = {
    individual pool_addr: address
    individual reserve_a : integer
    individual reserve_b : integer
    individual total_shares : integer

    # constants in the contract
    individual residue_numerator : integer # = 997
    individual residue_denominator : integer # = 1000

    # Ghost state
    individual _successful_deposit: bool
    individual _succesful_withdrawal: bool
    # Ghost state for modelling [NoDepositorLoss]
    individual _depositor_addr: address
    individual _depositor_deposited: bool
    individual _depositor_withdrew: bool

    # Snapshot when "the" deposit happens
    individual _depositor_shares: integer
    individual _a0: integer
    individual _b0: integer
    # and when the withdrawal happens
    individual _a1: integer
    individual _b1: integer


    after init {
        # pool_addr left unspecified
        reserve_a := integer.zero;
        reserve_b := integer.zero;
        total_shares := integer.zero;

        # We don't model the actual number, just their relationship.
        assume
            residue_numerator ~= integer.zero & residue_denominator ~= integer.zero
            & integer.lt(residue_numerator, residue_denominator);

        # Ghost
        _successful_deposit := false;
        _succesful_withdrawal := false;
        # _deposit_addr left unspecified
        assume _depositor_addr ~= pool_addr;
        _depositor_deposited := false;
        _depositor_withdrew := false;
    }

    action panic = {
        assume false
    }

    action deposit(depositor: address, desired_a: integer, min_a: integer, desired_b: integer, min_b: integer) = {
        require depositor ~= pool_addr;
        local amount_a: integer, amount_b: integer,
              balance_a: integer, balance_b: integer,
              new_total_shares: integer, shares_created: integer {
            (amount_a, amount_b) := get_deposit_amounts(desired_a, min_a, desired_b, min_b, reserve_a, reserve_b);

            if integer.lte(amount_a, integer.zero) | integer.lte(amount_b, integer.zero) {
                panic();
            }

            token_a.transfer(depositor, pool_addr, amount_a);
            token_b.transfer(depositor, pool_addr, amount_b);

            balance_a := token_a.read_balance(pool_addr);
            balance_b := token_b.read_balance(pool_addr);

            new_total_shares := integer.zero;
            if integer.gt(reserve_a, integer.zero) & integer.gt(reserve_b, integer.zero) {
                local shares_a: integer, shares_b: integer {
                    # FIXME: BUG: it seems this assumes reserve_a and reserve_b are both
                    # strictly positive, but that's NOT TRUE.
                    # [reserves_gt_zero_after_init_deposit] is false!
                    shares_a := integer.div(integer.mul(amount_a, total_shares), reserve_a);
                    shares_b := integer.div(integer.mul(amount_b, total_shares), reserve_b);
                    new_total_shares := integer.min(shares_a, shares_b);
                }
            } else {
                # NOTE: in the actual contract, new_total_shares is the sqrt
                # of this value, but that is not essential for correctness;
                # it just has good properties.
                new_total_shares := integer.mul(balance_a, balance_b);
            }

            shares_created := integer.sub(new_total_shares, total_shares);
            mint_shares(depositor, shares_created);

            reserve_a := balance_a;
            reserve_b := balance_b;

            # BEGIN GHOST
            _successful_deposit := true;
            if depositor = _depositor_addr {
                # "The" depositor cannot deposit twice
                if _depositor_deposited {
                    panic();
                }
                _depositor_deposited := true;
                # Snapshot what gets deposited
                _depositor_shares := shares_created;
                _a0 := amount_a;
                _b0 := amount_b;
            }
            # END GHOST
        }
    }

    action swap(to: address, buy_a: bool, out: integer, in_max: integer) = {
        require to ~= pool_addr;
        local reserve_sell: integer, reserve_buy: integer,
              n: integer, d: integer, sell_amount: integer,
              balance_a: integer, balance_b: integer,
              out_a: integer, out_b: integer,
              old_inv_a: integer, old_inv_b: integer,
              new_inv_a: integer, new_inv_b: integer,
              new_reserve_a: integer, new_reserve_b: integer {
            if buy_a {
                reserve_sell := reserve_b;
                reserve_buy := reserve_a;
            } else {
                reserve_sell := reserve_a;
                reserve_buy := reserve_b;
            }

            n := integer.mul(integer.mul(reserve_sell, out), residue_denominator);
            d := integer.mul(integer.sub(reserve_buy, out), residue_numerator);
            sell_amount := integer.add(integer.div(n, d), integer.one);

            if integer.gt(sell_amount, in_max) {
                panic();
            }

            if buy_a {
                token_b.transfer(to, pool_addr, sell_amount);
            } else {
                token_a.transfer(to, pool_addr, sell_amount);
            }

            balance_a := token_a.read_balance(pool_addr);
            balance_b := token_b.read_balance(pool_addr);

            out_a := integer.zero;
            out_b := integer.zero;
            if buy_a {
                out_a := out;
            } else {
                out_b := out;
            }

            new_inv_a := new_invariant_factor(balance_a, reserve_a, out_a);
            new_inv_b := new_invariant_factor(balance_b, reserve_b, out_b);
            old_inv_a := integer.mul(residue_denominator, reserve_a);
            old_inv_b := integer.mul(residue_denominator, reserve_b);

            if integer.lt(integer.mul(new_inv_a, new_inv_b), integer.mul(old_inv_a, old_inv_b)) {
                panic();
            }

            if buy_a {
                token_a.transfer(pool_addr, to, out_a);
            } else {
                token_b.transfer(pool_addr, to, out_b);
            }

            new_reserve_a := integer.sub(balance_a, out_a);
            new_reserve_b := integer.sub(balance_b, out_b);

            if integer.lte(new_reserve_a, integer.zero) | integer.lte(new_reserve_b, integer.zero) {
                panic();
            }

            reserve_a := new_reserve_a;
            reserve_b := new_reserve_b;
        }
    }

    action withdraw(to: address, share_amount: integer, min_a: integer, min_b: integer)
      returns (out_a: integer, out_b: integer) = {
        require to ~= pool_addr;
        local balance_a: integer, balance_b: integer, balance_shares: integer {
            token_s.transfer(to, pool_addr, share_amount);

            balance_a := token_a.read_balance(pool_addr);
            balance_b := token_b.read_balance(pool_addr);
            balance_shares := token_s.read_balance(pool_addr);

            out_a := integer.div(integer.mul(balance_a, balance_shares), total_shares);
            out_b := integer.div(integer.mul(balance_b, balance_shares), total_shares);

            if integer.lt(out_a, min_a) | integer.lt(out_b, min_b) {
                panic();
            }

            burn_shares(share_amount);
            token_a.transfer(pool_addr, to, out_a);
            token_b.transfer(pool_addr, to, out_b);
            reserve_a := integer.sub(balance_a, out_a);
            reserve_b := integer.sub(balance_b, out_b);

            # BEGIN GHOST
            _succesful_withdrawal := true;
            if to = _depositor_addr & _depositor_deposited & ~_depositor_withdrew {
                # "The" depositor MUST withdraw the full amount
                if share_amount ~= _depositor_shares {
                    panic();
                }
                _depositor_withdrew := true;
                # Snapshot what gets withdrawn
                _a1 := out_a;
                _b1 := out_b;
            }
            # END GHOST
        }
    }

    action get_deposit_amounts(desired_a: integer, min_a: integer, desired_b: integer, min_b: integer, reserve_a: integer, reserve_b: integer)
     returns (res_a: integer, res_b: integer) = {
        if reserve_a = integer.zero & reserve_b = integer.zero {
            res_a := desired_a;
            res_b := desired_b;
            # return (desired_a, desired_b)
        } else {
            local amount_a:integer, amount_b: integer {
                amount_b := integer.div(integer.mul(desired_a, reserve_b), reserve_a);
                if integer.lte(amount_b, desired_b) {
                    if integer.lt(amount_b, min_b) {
                        panic();
                    }
                    res_a := desired_a;
                    res_b := amount_b;
                    # return (desired_a, amount_b)
                } else {
                    amount_a := integer.div(integer.mul(desired_b, reserve_a), reserve_b);
                    # FIXME: Giuliano noticed that there is a bug here (in the actual example contract;
                    # we faithfully model it). It should check amount_a < min_a (symmetric to L211 above)
                    # rather than desired_a < min_a.
                    # if integer.gt(amount_a, desired_a) | integer.lt(desired_a, min_a) {
                    # This is the correct version:
                    if integer.gt(amount_a, desired_a) | integer.lt(amount_a, min_a) {
                        panic();
                    }
                    res_a := amount_a;
                    res_b := desired_b;
                    # return (amount_a, desired_b)
                }
            }
        }
    }

    action new_invariant_factor(balance: integer, reserve: integer, out: integer)
     returns (res: integer) = {
        local _delta:integer, adj_delta:integer {
            _delta := integer.sub(integer.sub(balance, reserve) , out);
            adj_delta := integer.zero;
            if integer.gt(_delta, integer.zero) {
                adj_delta := integer.mul(residue_numerator, _delta);
            } else {
                adj_delta := integer.mul(residue_denominator, _delta);
            }
            res := integer.add(integer.mul(residue_denominator, reserve), adj_delta);
        }
    }

    action mint_shares(to: address, amount: integer) = {
        token_s.mint(to, amount);
        total_shares := integer.add(total_shares, amount);
    }

    action burn_shares(amount: integer) = {
        token_s.burn(pool_addr, amount);
        total_shares := integer.sub(total_shares, amount);
    }

    export deposit
    export swap
    export withdraw

    export action mint_a(addr: address, amount: integer) = {
        token_a.mint(addr, amount);
    }
    export action mint_b(addr: address, amount: integer) = {
        token_b.mint(addr, amount);
    }

    invariant [reserve_gte_zero]
        integer.gte(reserve_a, integer.zero) & integer.gte(reserve_b, integer.zero)

    invariant [total_shares_gte_zero]
        integer.gte(total_shares, integer.zero)

    invariant [reserve_a_lte_balance]
        (reserve_a = integer.zero & ~token_a.balance.pre(pool_addr))
        | (token_a.balance.pre(pool_addr) & (forall V. token_a.balance.map(pool_addr, V) -> integer.lte(reserve_a, V)))
    invariant [reserve_b_lte_balance]
        (reserve_b = integer.zero & ~token_b.balance.pre(pool_addr))
        | (token_b.balance.pre(pool_addr) & (forall V. token_b.balance.map(pool_addr, V) -> integer.lte(reserve_b, V)))
    # We would want that to say that total_shares = sum of all share balances
    # akin to the "Summing Up Smart Transitions" CAV 2020 paper
    # a solution referenced there is to use a ghost variable for the sum
    # (the reference is [13], to "solc-verify")
    invariant [total_shares_gte_any_share_balance]
        forall A, V. token_s.balance.map(A, V) -> integer.gte(total_shares, V)
    # Maybe this suffices? (It seems to crash Ivy when run with actual ints).
    # invariant [total_shares_gte_sum]
    #     forall A1, V1, V2, VSUM.
    #         token_s.balance.map(A1, V1) & token_s.balance.map(pool_addr, V2)
    #         & integer.plus(V1, V2, VSUM) -> integer.gte(total_shares, VSUM)

    invariant [both_zero_or_none_zero]
        (reserve_a = integer.zero & reserve_b = integer.zero)
        | (integer.gt(reserve_a, integer.zero) & integer.gt(reserve_b, integer.zero))

    # It is NOT the case that:
    #   (reserve_a = integer.zero & reserve_b = integer.zero) <-> (total_shares = integer.zero)
    # because reserves can be increased arbitrarily through transferring funds to the pool,
    # and the reserves can then be increased through swaps, without any calls to `deposit`.

    invariant [no_depositor_loss]
        _depositor_deposited & _depositor_withdrew
        ->
        (integer.lte(_a1, _a0) & (forall DA, DB, DIV, MUL.
            integer.minus(_a0, _a1, DA) & integer.minus(_b1, _b0, DB)
            & integer.divi(_a1, _b1, DIV) & integer.mult(DB, DIV, MUL)
            -> integer.lte(DA, MUL)))
        |
        (integer.lte(_b1, _b0) & (forall DA, DB, DIV, MUL.
            integer.minus(_b0, _b1, DB) & integer.minus(_a1, _a0, DA)
            & integer.divi(_b1, _a1, DIV) & integer.mult(DA, DIV, MUL)
            -> integer.lte(DB, MUL)))
        |
        (integer.lte(_a0, _a1) & integer.lte(_b0, _b1))

    attribute method = convert_to_mypyvy
} with token_a, token_b, token_s, integer #, integer.impl

# mypyvy traces

# # No invalid deposits allowed
# unsat trace {
#   ext_c_pool_mint_a
#   ext_c_pool_mint_b
#   ext_c_pool_deposit
#   assert pool_reserve_a = integer_zero & pool_reserve_b = integer_zero
# }

# # Sanity check: can do a full round-trip
# sat trace {
#   ext_c_pool_mint_a
#   ext_c_pool_mint_b
#   ext_c_pool_deposit
#   assert integer_gt(pool_reserve_a, integer_zero) & integer_gt(pool_reserve_b, integer_zero)
#   ext_c_pool_swap
#   ext_c_pool_withdraw
#   assert pool_reserve_a = integer_zero & pool_reserve_b = integer_zero
# }
