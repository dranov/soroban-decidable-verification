#lang ivy1.8

# TODO: model total order on keys? see https://github.com/microsoft/ivy/blob/master/doc/examples/sht/key.md
# this is just the partial_function definition in collections.ivy for now
# TODO: might want to add some expiry-related logic?
# TODO: what's the relation between this and `hash_map`?
module partial_map(dom,rng) = {
    relation map(X:dom,Y:rng)
    relation pre(X:dom) 

    # mutate the function so x maps to y
    action set(x:dom,y:rng)

    # remove an element from the pre-image
    action remove(x:dom)

    # get the value of x, if any
    action get(x:dom) returns (y:rng)

    # true if x is in the pre-image
    action has(x:dom) returns (r:bool)
    
    # if x in pre, there exists a y such that map(x,y)
    action img_lemma(x:dom)

    specification {
        after init {
                map(X,Y) := false
            }

        implement set {
            call img_lemma(x);
            map(x,Y) := Y = y;
            pre(x) := true
        }

        implement remove {
            call img_lemma(x);
            map(x,Y) := false;
            pre(x) := false
        }

        after get {
            assume pre(x) -> map(x,y)
        }

        after has {
            assume r = pre(x)
        }

        implement img_lemma(x:dom) {
            assume pre(x) -> exists Y. map(x,Y)
        }

        # TODO: not sure what "explicit" means
        # NOTE that this is inside the spec, whereas [functionality] is outside.
        explicit invariant [img] pre(X) -> exists Y. map(X,Y)
    }

    conjecture [functionality] map(K,L) & map(K,M) -> L = M

    # TODO: what does this mean??
    trusted isolate iso = this
}