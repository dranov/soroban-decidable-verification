#lang ivy1.8

include soroban

type key
type val

instance kv: partial_map(key, val)

action _save_restore_roundtrip = {
    kv._save_state();
    kv._restore_state();
    ensure kv.pre(X) = (old kv.pre(X));
    ensure kv.map(X, Y) = (old kv.map(X, Y));
}
export _save_restore_roundtrip

action _integer_next = {
    local x:integer, y:integer {
        x := integer.zero;
        y := integer.next(x);
        assert y = integer.one;
    }
}

export _integer_next

conjecture [succ_lt] ledger.succ(X, Y) -> X:ledger < Y

conjecture [m_succ_lt] integer.succ(X, Y) -> integer.lt(X, Y)
conjecture [m_lteq_def]
    forall X:integer, Y:integer.
        integer.lte(X, Y) <-> (integer.lt(X, Y) | X = Y)

conjecture [m_lt_irreflexive]
    forall X:integer. ~integer.lt(X, X)

conjecture [lte_zero] integer.lte(integer.zero, integer.zero)
conjecture [ex_minus_one] exists X:integer. integer.succ(X, integer.zero)