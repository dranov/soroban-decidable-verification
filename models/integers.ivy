#lang ivy1.8

module integer = {
    type this
    alias t = this

    individual minus_one : t
    individual zero : t
    individual one : t

    relation lt(X:t,Y:t)
    relation plus(X:t,Y:t,Z:t)
    relation minus(X:t,Y:t,Z:t)

    # Derived relations
    # FIXME: there's some breakage if we use the definition facility
    # rather, we have the *_def properties to achieve the same thing
    # this is probably a bug in Ivy
    relation lte(X:t, Y:t)# = lt(X, Y) | X = Y
    relation gt(X:t, Y:t)# = ~lt(X, Y) & X ~= Y  # i.e. ~lte(X, Y)
    relation gte(X:t, Y:t)# = ~lt(X, Y)
    relation succ(X:t, Y:t)# = plus(X, one, Y)

    action next(x:t) returns (y:t)
    action prev(x:t) returns (y:t)

    # function (X:t + Y:t) : t
    # function (X:t - Y:t) : t
    # A function is a relation with [functionality] and [totality]
    # axioms. We state the former and instantiate the latter on demand.
    action add(x:t,y:t) returns (z:t)
    action sub(x:t,y:t) returns (z:t)

    action opposite_lemma(x:t) # -x exists and x + (-x) = 0
    action add_lemma(x:t,y:t)  # x + y exists
    action sub_lemma(x:t,y:t)  # x - y exists

    object spec = {
        property [constants_order] succ(minus_one, zero) & succ(zero, one)
        property [minus_one_zero] 
            lt(minus_one, zero) & ~exists X. lt(minus_one, X) & lt(X, zero)
        property [zero_one] 
            lt(zero, one) & ~exists X. lt(zero, X) & lt(X, one)

        # Derived relations
        property [lte_def] lte(X, Y) <-> lt(X, Y) | X = Y
        property [gt_def] gt(X, Y) <-> ~lt(X, Y) & X ~= Y
        property [gte_def] gte(X, Y) <-> ~lt(X, Y)
        property [succ_def] succ(X, Y) <-> plus(X, one, Y)

        # Properties of order
        property [transitivity] lt(T,U) & lt(U,V) -> lt(T,V)
        property [antisymmetry] ~(lt(T,U) & lt(U,T))
        property [totality] lt(T,U) | T = U | lt(U,T)
        property [irreflexivity] ~lt(T,T) # implied by the above

        # Functionality (without totality)
        property [plus_functionality]
            plus(X, Y, Z1) & plus(X, Y, Z2) -> Z1 = Z2
        property [minus_functionality]
            minus(X, Y, Z1) & minus(X, Y, Z2) -> Z1 = Z2

        # Properties of addition
        property [plus_commutative]
            plus(X, Y, Z) -> plus(Y, X, Z)
        property [plus_associative]
            plus(A, B, AB) & plus (AB, C, ABC1) &
            plus(B, C, BC) & plus(A, BC, ABC2) -> ABC1 = ABC2
        property [plus_zero]
            plus(zero, X, X)
        property [plus_positive]
            plus(X, Y, Z) & gt(Y, zero) -> lt(X, Z)

        # Properties of subtraction
        property [minus_zero]
            minus(X, zero, X)
        property [minus_self]
            minus(X, X, zero)
        property [minus_plus]
            minus(X, Y, Z) -> plus(Z, Y, X)
        property [minus_gt_negative]
            minus(X, Y, Z) & lt(X, Y) -> lt(Z, zero)

        # These properties cause decidability issues
        # property [every_number_has_negative]
        #     exists Y. plus(X, Y, zero) & minus(zero, Y, X)

        #################
        # Derived facts #
        #################
        # The properties are sufficient to establish:
        property [succ_distinct] succ(X, Y) -> X ~= Y
        property [constants_distinct] ~(zero = one) & ~(minus_one = zero) & ~(minus_one = one)
        property [minus_one_cancel]
            plus(minus_one, one, zero) & minus(zero, minus_one, one) & minus(zero, one, minus_one)
        property [succ_eq] succ(X, Z) & succ(Y, Z) -> X = Y
        property [succ_no_gaps]
            succ(X, Y) -> ~exists Z.  lt(X, Z) & lt(Z, Y)
        property [no_gaps_succ]
            lt(X, Y) & (~exists Z.  lt(X, Z) & lt(Z, Y)) -> succ(X, Y)

        ##########################
        # Action implementations #
        ##########################
        
        implement opposite_lemma(x:t) {
            assume exists Z. plus(x, Z, zero) & minus(zero, Z, x);
        }
        implement add_lemma(x:t, y:t) {
            assume exists Z. plus(x, y, Z);
        }
        implement sub_lemma(x:t, y:t) {
            assume exists Z. minus(x, y, Z);
        }

        after add {
            call add_lemma(x, y); call sub_lemma(z, x); call sub_lemma(z, y);
            call opposite_lemma(x); call opposite_lemma(y); call opposite_lemma(z);
            assume plus(x, y, z);
        }
        after sub {
            call sub_lemma(x, y); call add_lemma(z, y);
            call opposite_lemma(x); call opposite_lemma(y); call opposite_lemma(z);
            assume minus(x, y, z);
        }
        after next {
            assert plus(x, one, y);
            assert minus(y, one, x);
        }
        after prev {
            assert minus(x, one, y);
            assert plus(y, one, x);
        }
    }

    object impl = {
        interpret t -> int
        definition minus_one = 0 - 1
        definition zero = 0
        definition one = 1
        definition lt(X, Y) = (X < Y)
        definition plus(X, Y, Z) = (Z = X + Y)
        definition minus(X, Y, Z) = (Z = X - Y)

        # Derived relations
        # FIXME: see the problem above with derived relations
        definition lte(X, Y) = (X <= Y)
        definition gt(X, Y) = (X > Y)
        definition gte(X, Y) = (X >= Y)
        definition succ(X, Y) = (Y = X + 1)
    }
    isolate iso = impl,spec
}

# Wrapper over `int` that exposes the same interface as `integer`
module interpreted_integer = {
    type this
    alias t = this
    interpret t -> int
    
    individual minus_one : t
    individual zero : t
    individual one : t

    relation lt(X:t,Y:t) = X < Y
    relation plus(X:t,Y:t,Z:t) = Z = X + Y
    relation minus(X:t,Y:t,Z:t) = Z = X - Y
    relation lte(X:t, Y:t) = X <= Y
    relation gt(X:t, Y:t) = X > Y
    relation gte(X:t, Y:t) = X >= Y
    relation succ(X:t, Y:t) = Y = X + 1

    action next(x:t) returns (y:t)
    action prev(x:t) returns (y:t)

    action add(x:t,y:t) returns (z:t)
    action sub(x:t,y:t) returns (z:t)

    object spec = {
        property [minus_one_def] minus_one = 0 - 1
        property [zero_def] zero = 0
        property [one_def] one = 1

        after next {
            assume y = x + 1
        }
        after prev {
            assume y = x - 1
        }
        after add {
            assume z = x + y
        }
        after sub {
            assume z = x - y
        }
    }

    object impl = {
        interpret t -> int
        definition minus_one = 0 - 1
        definition zero = 0
        definition one = 1
    }

    isolate iso = impl,spec
}

