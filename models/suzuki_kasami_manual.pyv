sort node
sort seq_t
mutable constant init_node: node
immutable constant seq_zero: seq_t
immutable relation seq_le(seq_t, seq_t)
immutable relation seq_lt(seq_t, seq_t)
mutable relation seq_successive(seq_t, seq_t)
mutable relation n_have_privilege(node)
mutable relation n_requesting(node)
mutable relation reqs(node, node, seq_t)
mutable relation t_for(seq_t, node)
mutable relation t_q(seq_t, node)
mutable relation crit(node)
mutable function n_RN(node, node): seq_t
mutable function n_token_seq(node): seq_t
mutable function t_LN(seq_t, node): seq_t
axiom seq_le(X, X)
axiom seq_le(X, Y)
& seq_le(Y, Z) -> seq_le(X, Z)
axiom seq_le(X, Y)
& seq_le(Y, X) -> X = Y
axiom seq_le(X, Y) | seq_le(Y, X)
axiom seq_lt(X, Y) <-> seq_le(X, Y)
& !(X = Y)
axiom seq_le(seq_zero, X)
mutable relation __m_t_q(seq_t, node)
mutable function __m_t_LN(seq_t, node): seq_t
mutable relation __ts0__m_t_q(seq_t, node)
transition _havoc_intermediaries()
  modifies __m_t_LN, __m_t_q, __ts0__m_t_q
  (forall X0:seq_t, X1:node. exists V:bool. new(__m_t_q(X0, X1)) = V)
& (forall X0:seq_t, X1:node. exists V:seq_t. new(__m_t_LN(X0, X1)) = V)
& (forall X0:seq_t, X1:node. exists V:bool. new(__ts0__m_t_q(X0, X1)) = V)

init exists __fml_c_y:seq_t, __fml_c_y_a:seq_t, __new_fml_c_x:seq_t, __new_fml_c_x_a:seq_t, __new_loc_c_0:seq_t, __new_loc_c_0_a:seq_t.
 (forall V0:node. n_have_privilege(V0) <-> V0 = init_node)

& (forall V0:node. n_requesting(V0) <-> false)

& (forall V0:node, V1:node. n_RN(V0, V1) = seq_zero)

& __new_fml_c_x = seq_zero
& __new_loc_c_0 = __fml_c_y
& seq_successive(__new_fml_c_x, __fml_c_y)
& (forall V0:node. n_token_seq(V0) = (if V0 = init_node then __new_loc_c_0 else seq_zero))

& (forall V0:node, V2:seq_t, V1:node. reqs(V0, V1, V2) <-> false)

& __new_fml_c_x_a = seq_zero
& __new_loc_c_0_a = __fml_c_y_a
& seq_successive(__new_fml_c_x_a, __fml_c_y_a)
& (forall V0:seq_t, V1:node. t_for(V0, V1) <-> V0 = __new_loc_c_0_a & V1 = init_node)

& (forall V0:seq_t, V1:node. t_LN(V0, V1) = seq_zero)
& (forall V0:seq_t, V1:node. t_q(V0, V1) <-> false)
& (forall V0:node. crit(V0) <-> false)

transition ext_c_request(__fml_c_n:node, __fml_c_y:seq_t, __ts0__new_fml_c_x:seq_t, __ts0_a:bool)
  modifies n_RN, n_requesting, reqs
  !false
& ((forall V0:node. new(n_requesting(V0)) <-> (if V0 = __fml_c_n then true else n_requesting(V0)))
& __ts0__new_fml_c_x = n_RN(__fml_c_n, __fml_c_n)
& (forall V0:node, V1:node. new(n_RN(V0, V1)) = (if __ts0_a then if V0 = __fml_c_n
& V1 = __fml_c_n then __fml_c_y else n_RN(V0, V1) else n_RN(V0, V1)))
& (forall V0:node, V2:seq_t, V1:node. new(reqs(V0, V1, V2)) <-> (if __ts0_a then if V1 = __fml_c_n
& V2 = new(n_RN(__fml_c_n, __fml_c_n)) then !(V0 = __fml_c_n) else reqs(V0, V1, V2) else reqs(V0, V1, V2)))
& (__ts0_a <-> !n_have_privilege(__fml_c_n))
& !n_requesting(__fml_c_n)
& (!__ts0_a | seq_successive(__ts0__new_fml_c_x, __fml_c_y)))

transition ext_c_rcv_request(__fml_c_m:node, __fml_c_n:node, __fml_c_r:seq_t, __fml_c_y:seq_t, __fml_c_y_a:seq_t, __fml_c_y_b:seq_t, __ts0__new_fml_c_x:seq_t, __ts0__new_fml_c_x_a:seq_t, __ts0__new_fml_c_x_b:seq_t, __ts0__new_loc_c_0:seq_t, __ts0__new_loc_c_0_a:seq_t, __ts0__new_loc_c_0_b:seq_t, __ts0_a:bool)
  modifies n_RN, n_have_privilege, t_LN, t_for, t_q
  !false

& reqs(__fml_c_n, __fml_c_m, __fml_c_r)

& ((forall V0:node, V1:node. new(n_RN(V0, V1)) = (if V0 = __fml_c_n
& V1 = __fml_c_m then if seq_le(__fml_c_r, n_RN(__fml_c_n, __fml_c_m))
 then n_RN(__fml_c_n, __fml_c_m) else __fml_c_r else n_RN(V0, V1)))

# new(n_have_privilege(N)) <-> (n_have_privilege(N) & n_requesting(n)
& (__ts0_a <-> n_have_privilege(__fml_c_n)
& !n_requesting(__fml_c_n)
& seq_successive(t_LN(n_token_seq(__fml_c_n), __fml_c_m), new(n_RN(__fml_c_n, __fml_c_m))))
& (forall V0:node. new(n_have_privilege(V0)) <-> (if __ts0_a then if V0 = __fml_c_n 
then false else n_have_privilege(V0) else n_have_privilege(V0)))

# new(t_for(S, V))
& __ts0__new_loc_c_0 = __fml_c_y
& __ts0__new_fml_c_x = n_token_seq(__fml_c_n)
& (!__ts0_a | seq_successive(__ts0__new_fml_c_x, __fml_c_y))
& (forall V0:seq_t, V1:node. new(t_for(V0, V1)) <-> (if __ts0_a then if V0 = __ts0__new_loc_c_0
& V1 = __fml_c_m then true else t_for(V0, V1) else t_for(V0, V1)))

# new(t_LN)
& __ts0__new_fml_c_x_a = n_token_seq(__fml_c_n)
& __ts0__new_loc_c_0_a = __fml_c_y_a
& (!__ts0_a | seq_successive(__ts0__new_fml_c_x_a, __fml_c_y_a))
& (forall V0:seq_t, V1:node. new(t_LN(V0, V1)) = (if __ts0_a then if V0 = __ts0__new_loc_c_0_a 
then t_LN(n_token_seq(__fml_c_n), V1) else t_LN(V0, V1) else t_LN(V0, V1)))

# new(t_q)
& __ts0__new_fml_c_x_b = n_token_seq(__fml_c_n)
& __ts0__new_loc_c_0_b = __fml_c_y_b
& (!__ts0_a | seq_successive(__ts0__new_fml_c_x_b, __fml_c_y_b)))
& (forall V0:seq_t, V1:node. new(t_q(V0, V1)) <-> (if __ts0_a then if V0 = __ts0__new_loc_c_0_b
 then t_q(n_token_seq(__fml_c_n), V1) else t_q(V0, V1) else t_q(V0, V1)))


transition ext_c_rcv_privilege(__fml_c_n:node, __fml_c_t:seq_t)
  modifies n_have_privilege, n_token_seq
  !false
& ((forall V0:node. new(n_have_privilege(V0)) <-> (if V0 = __fml_c_n then true else n_have_privilege(V0)))
& (forall V0:node. new(n_token_seq(V0)) = (if V0 = __fml_c_n then __fml_c_t else n_token_seq(V0)))
& t_for(__fml_c_t, __fml_c_n)
& seq_lt(n_token_seq(__fml_c_n), __fml_c_t))
transition ext_c_enter(__fml_c_n:node)
  modifies crit
  !false
& ((forall V0:node. new(crit(V0)) <-> (if V0 = __fml_c_n then true else crit(V0)))
& n_have_privilege(__fml_c_n)
& n_requesting(__fml_c_n))
transition ext_c_exit(__fml_c_n:node, __fml_c_y:seq_t, __fml_c_y_a:seq_t, __fml_c_y_b:seq_t, __loc_c_m:node, __ts0__new_fml_c_x:seq_t, __ts0__new_fml_c_x_a:seq_t, __ts0__new_fml_c_x_b:seq_t, __ts0__new_loc_c_0:seq_t, __ts0__new_loc_c_0_a:seq_t, __ts0__new_loc_c_0_b:seq_t, __ts0_a:bool, __ts0_b:bool)
  modifies crit, n_have_privilege, n_requesting, t_LN, t_for, t_q
  !false
& ((forall V0:node. new(crit(V0)) <-> (if V0 = __fml_c_n then false else crit(V0)))
& (forall V0:node. new(n_requesting(V0)) <-> (if V0 = __fml_c_n then false else n_requesting(V0)))
& (forall V0:seq_t, V1:node. __m_t_LN(V0, V1) = (if V0 = n_token_seq(__fml_c_n)
& V1 = __fml_c_n then n_RN(__fml_c_n, __fml_c_n) else t_LN(V0, V1)))
& (forall V0:seq_t, V1:node. __m_t_q(V0, V1) <-> (if V0 = n_token_seq(__fml_c_n) then seq_successive(__m_t_LN(n_token_seq(__fml_c_n), V1), n_RN(__fml_c_n, V1)) else t_q(V0, V1)))
& (forall V0:seq_t, V1:node. __ts0__m_t_q(V0, V1) <-> (if V0 = n_token_seq(__fml_c_n)
& V1 = __loc_c_m then false else __m_t_q(V0, V1)))
& (forall V0:node. new(n_have_privilege(V0)) <-> (if __ts0_b then n_have_privilege(V0) else if V0 = __fml_c_n then false else n_have_privilege(V0)))
& __ts0__new_fml_c_x = n_token_seq(__fml_c_n)
& __ts0__new_loc_c_0 = __fml_c_y
& (forall V0:seq_t, V1:node. new(t_for(V0, V1)) <-> (if __ts0_b then t_for(V0, V1) else if V0 = __ts0__new_loc_c_0
& V1 = __loc_c_m then true else t_for(V0, V1)))
& __ts0__new_fml_c_x_a = n_token_seq(__fml_c_n)
& __ts0__new_loc_c_0_a = __fml_c_y_a
& (forall V0:seq_t, V1:node. new(t_LN(V0, V1)) = (if __ts0_b then __m_t_LN(V0, V1) else if V0 = __ts0__new_loc_c_0_a then __m_t_LN(n_token_seq(__fml_c_n), V1) else __m_t_LN(V0, V1)))
& __ts0__new_fml_c_x_b = n_token_seq(__fml_c_n)
& __ts0__new_loc_c_0_b = __fml_c_y_b
& (forall V0:seq_t, V1:node. new(t_q(V0, V1)) <-> (if __ts0_b then __m_t_q(V0, V1) else if V0 = __ts0__new_loc_c_0_b then __ts0__m_t_q(n_token_seq(__fml_c_n), V1) else __ts0__m_t_q(V0, V1)))
& crit(__fml_c_n)
& (__ts0_a | __ts0_b)
& (!__ts0_a | __m_t_q(n_token_seq(__fml_c_n), __loc_c_m))
& (!__ts0_a | seq_successive(__ts0__new_fml_c_x, __fml_c_y))
& (!__ts0_a | seq_successive(__ts0__new_fml_c_x_a, __fml_c_y_a))
& (!__ts0_a | seq_successive(__ts0__new_fml_c_x_b, __fml_c_y_b))
& (forall V0:node. !__ts0_b | !__m_t_q(n_token_seq(__fml_c_n), V0)))
safety [mutex] crit(N)
& crit(M) -> N = M
invariant [single_privilege] n_have_privilege(N)
& n_have_privilege(M) -> N = M
invariant [allowed_in_crit] crit(N) -> n_have_privilege(N)
& n_requesting(N)
invariant [unique_tokens] t_for(I, N) & t_for(I, M) -> N = M
invariant [corresponding_tokens] !(n_token_seq(N) = seq_zero) -> t_for(n_token_seq(N), N)
invariant [current_privilege_latest_token_1] n_have_privilege(N)
& !(N = M) -> seq_lt(n_token_seq(M), n_token_seq(N))
invariant [current_privilege_latest_token_2] n_have_privilege(N)
& t_for(I, M) -> seq_le(I, n_token_seq(N))
invariant [no_request_to_self] reqs(N, M, I) -> !(N = M)
invariant [no_consecutive_privilege] t_for(I, N)
& seq_successive(J, I)
& t_for(J, M) -> !(N = M)
invariant [token_relation] t_for(I, N)
& t_for(J, M)
& seq_lt(I, J) -> seq_le(I, n_token_seq(N))

sat trace {
  ext_c_request
  _havoc_intermediaries
  ext_c_request
  _havoc_intermediaries
  ext_c_rcv_request
}