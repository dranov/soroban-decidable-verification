#lang ivy1.8

include soroban
include token_contract

module liquidity_contract = {
    # We convert each DataKey into a separate singleton
    # For TokenA, TokenB, and TokenShare, we have instances
    # rather than storing the address and having an indirection
    instance a : token_contract
    instance b : token_contract
    instance share : token_contract

    instance total_shares : singleton(integer)
    instance reserve_a : singleton(integer)
    instance reserve_b : singleton(integer)

    # constants in the contract
    individual residue_numerator : integer # = 997
    individual residue_denominator : integer # = 1000

    # The actual contract is modelled such that a, b, share
    # and so on can be unitialized, but that would complicate
    # modelling, so we assume LiquidityPool contracts are always
    # created initialized. This shouldn't be an issue, as
    # in the real contract, any operation on an uninitialized
    # contract would fail/panic.
    # This corresponds to fn initialize()
    after init {
        _this := env._register_contract();
        # the share contract has just been created i.e. it has no admin
        assume ~share.ad.has_administrator();
        env.provide_auth(_this, share._this, _initialize);
        share.initialize(_this);
        # FIXME: this is a hack to clear auth_provided
        env.new_transaction();

        total_shares.set(integer.zero);
        reserve_a.set(integer.zero);
        reserve_b.set(integer.zero);

        # We don't model the actual number, just their relationship.
        assume 
            residue_numerator ~= integer.zero & residue_denominator ~= integer.zero
            & integer.lt(residue_numerator, residue_denominator);
    }

    action share_id returns (res : address) = {
        res := share._this;
    }

    action deposit(depositor: address, desired_a: integer, min_a: integer, desired_b: integer, min_b: integer) = {
        # `depositor` is called `to` in the contract code
        env.require_auth(depositor, _this, _deposit);
        local _reserve_a:integer, _reserve_b:integer,
            _amount_a:integer, _amount_b:integer,
            _balance_a:integer, _balance_b:integer,
            _total_shares:integer, _new_total_shares:integer,
            _shares_created:integer {

            _reserve_a := reserve_a.get();
            _reserve_b := reserve_b.get();

            # Calculate deposit amounts
            (_amount_a, _amount_b) := get_deposit_amounts(desired_a, min_a, desired_b, min_b, _reserve_a, _reserve_b);
            env.provide_auth(_this, a._this, _transfer);
            a.transfer(depositor, _this, _amount_a);
            env.provide_auth(_this, b._this, _transfer);
            b.transfer(depositor, _this, _amount_b);

            # Calculate how many new pool shares to mint
            _balance_a := get_balance_a();
            _balance_b := get_balance_b();
            _total_shares := total_shares.get();

            _new_total_shares := integer.zero;
            if integer.gt(_reserve_a, integer.zero) & integer.gt(_reserve_b, integer.zero) {
                local  _shares_a: integer, _shares_b: integer {
                    _shares_a := integer.div(integer.mul(_balance_a, _total_shares), _reserve_a);
                    _shares_b := integer.div(integer.mul(_balance_b, _total_shares), _reserve_b);
                    _new_total_shares := integer.min(_shares_a, _shares_b);
                }
            } else {
                # NOTE: it's not crucial that this is the sqrt;
                # it just has good properties.
                _new_total_shares := integer.sqrt(integer.mul(_balance_a, _balance_b));
            }

            _shares_created := integer.sub(_new_total_shares, _total_shares);
            # BEGIN GHOST
            _ghost_minted_shares := _shares_created;
            _ghost_amount_a := _amount_a;
            _ghost_amount_b := _amount_b;
            # END GHOST
            mint_shares(depositor, _shares_created);
            reserve_a.set(_balance_a);
            reserve_b.set(_balance_b);
        }
    }

    action swap(to: address, buy_a: bool, out: integer, in_max: integer) = {
        env.require_auth(to, _this, _swap);
        local _reserve_a:integer, _reserve_b:integer,
            _reserve_sell:integer, _reserve_buy:integer,
            _n:integer, _d:integer, _sell_amount:integer,
             _balance_a:integer, _balance_b:integer,
            _out_a:integer, _out_b:integer,
            _new_inv_a:integer, _new_inv_b:integer,
            _old_inv_a:integer, _old_inv_b:integer {

            _reserve_a := reserve_a.get();
            _reserve_b := reserve_b.get();

            if buy_a {
                _reserve_sell := _reserve_b;
                _reserve_buy := _reserve_a;
            } else {
                _reserve_sell := _reserve_a;
                _reserve_buy := _reserve_b;
            }

            # First calculate how much needs to be sold to buy amount `out`
            _n := integer.mul(integer.mul(_reserve_sell, out), residue_denominator);
            _d := integer.mul(integer.sub(_reserve_buy, out), residue_numerator);
            _sell_amount := integer.add(integer.div(_n, _d), integer.one);

            if integer.gt(_sell_amount, in_max) {
                panic();
            }

            if buy_a {
                env.provide_auth(_this, b._this, _transfer);
                b.transfer(to, _this, _sell_amount);
            } else {
                env.provide_auth(_this, a._this, _transfer);
                a.transfer(to, _this, _sell_amount);
            }

            _balance_a := get_balance_a();
            _balance_b := get_balance_b();

            _out_a := integer.zero;
            _out_b := integer.zero;
            if buy_a {
                _out_a := out;
            } else {
                _out_b := out;
            }

            _new_inv_a := new_invariant_factor(_balance_a, _reserve_a, _out_a);
            _new_inv_b := new_invariant_factor(_balance_b, _reserve_b, _out_b);
            _old_inv_a := integer.mul(residue_denominator, _reserve_a);
            _old_inv_b := integer.mul(residue_denominator, _reserve_b);

            if integer.lt(integer.mul(_new_inv_a, _new_inv_b), integer.mul(_old_inv_a, _old_inv_b)) {
                panic();
            }

            if buy_a {
                transfer_a(to, _out_a);
            } else {
                transfer_b(to, _out_b);
            }
            reserve_a.set(integer.sub(_balance_a, _out_a));
            reserve_b.set(integer.sub(_balance_b, _out_b));
        }
    }

    action withdraw(to: address, share_amount: integer, min_a: integer, min_b: integer)
      returns (out_a: integer, out_b: integer) = {
        env.require_auth(to, _this, _withdraw);
        local _balance_a:integer, _balance_b:integer,
              _balance_shares:integer, _total_shares:integer {
            # First transfer the pool shares that need to be redeemed
            env.provide_auth(_this, share._this, _transfer);
            share.transfer(to, _this, share_amount);

            _balance_a := get_balance_a();
            _balance_b := get_balance_b();
            _balance_shares := get_balance_shares();

            _total_shares := total_shares.get();

            # Now calculate the withdraw amounts

            # NOTE: notice that out_a and out_b get computed in terms of the
            # _balance_shares rather than share_amount. If, for instance, someone
            # transfered shares to the LP contract externally (not part and of a
            # withdrawal), then whoever withdraws first will get token A token B
            # corresponding to that amount of shares on top of share_amount.
            out_a := integer.div(integer.mul(_balance_a, _balance_shares), _total_shares);
            out_b := integer.div(integer.mul(_balance_b, _balance_shares), _total_shares);

            # BEGIN GHOST
            _ghost_burned_shares := share_amount;
            _ghost_amount_a := out_a;
            _ghost_amount_b := out_b;
            # END GHOST

            if integer.lt(out_a, min_a) | integer.lt(out_b, min_b) {
                panic();
            }

            burn_shares(_balance_shares);
            transfer_a(to, out_a);
            transfer_b(to, out_b);
            reserve_a.set(integer.sub(_balance_a, out_a));
            reserve_b.set(integer.sub(_balance_b, out_b));

            # (out_a, out_b)
       }
    }

    action get_rsrvs returns (res_a: integer, res_b: integer) = {
        res_a := reserve_a.get();
        res_b := reserve_b.get();
    }

    # Internal functions
    action get_deposit_amounts(desired_a: integer, min_a: integer, desired_b: integer, min_b: integer, reserve_a: integer, reserve_b: integer)
     returns (res_a: integer, res_b: integer) = {
        if reserve_a = integer.zero & reserve_b = integer.zero {
            res_a := desired_a;
            res_b := desired_b;
            # return (desired_a, desired_b)
        } else {
            local amount_a:integer, amount_b: integer {
                amount_b := integer.div(integer.mul(desired_a, reserve_b), reserve_a);
                if integer.lte(amount_b, desired_b) {
                    if integer.lt(amount_b, min_b) {
                        panic();
                    }
                    res_a := desired_a;
                    res_b := amount_b;
                    # return (desired_a, amount_b)
                } else {
                    amount_a := integer.div(integer.mul(desired_b, reserve_a), reserve_b);
                    # FIXME: Giuliano noticed that there is a bug here (in the actual example contract;
                    # we faithfully model it). It should check amount_a < min_a (symmetric to L211 above)
                    # rather than desired_a < min_a.
                    if integer.gt(amount_a, desired_a) | integer.lt(desired_a, min_a) {
                        panic();
                    }
                    res_a := amount_a;
                    res_b := desired_b;
                    # return (amount_a, desired_b)
                }
            }
        }
    }

    action new_invariant_factor(balance: integer, reserve: integer, out: integer)
     returns (res: integer) = {
        local _delta:integer, adj_delta:integer {
            _delta := integer.sub(integer.sub(balance, reserve) , out);
            adj_delta := integer.zero;
            if integer.gt(_delta, integer.zero) {
                adj_delta := integer.mul(residue_numerator, _delta);
            } else {
                adj_delta := integer.mul(residue_denominator, _delta);
            }
            res := integer.add(integer.mul(residue_denominator, reserve), adj_delta);
        }   

    }

    action mint_shares(to: address, amount: integer) = {
        local total: integer {
            total := total_shares.get();
            env.provide_auth(_this, share._this, _mint);
            share.mint(to, amount);
            total_shares.set(integer.add(total, amount));
        }
    }

    action burn_shares(amount: integer) = {
        local total: integer {
            total := total_shares.get();
            env.provide_auth(_this, share._this, _burn);
            share.burn(_this, amount);
            total_shares.set(integer.sub(total, amount));
        }
    }

    action transfer_a(to: address, amount: integer) = {
        env.provide_auth(_this, a._this, _transfer);
        a.transfer(_this, to, amount);
    }

    action transfer_b(to: address, amount: integer) = {
        env.provide_auth(_this, b._this, _transfer);
        b.transfer(_this, to, amount);
    }

    action transfer_shares(to: address, amount: integer) = {
        env.provide_auth(_this, share._this, _transfer);
        share.transfer(_this, to, amount);
    }

    action get_balance_a returns (res: integer) = {
        env.provide_auth(_this, a._this, _balance);
        res := a.balance(_this);
    }

    action get_balance_b returns (res: integer) = {
        env.provide_auth(_this, b._this, _balance);
        res := b.balance(_this);
    }

    action get_balance_shares returns (res: integer) = {
        env.provide_auth(_this, share._this, _balance);
        res := share.balance(_this);
    }

    # Contract-generic stuff
    individual _this : address
    # moved into the after init above because
    # this needs to run BEFORE everything else
    # after init {
    #     _this := env._register_contract();
    # }

    action _save_state = {
        a._save_state();
        b._save_state();
        share._save_state();
        total_shares._save_state();
        reserve_a._save_state();
        reserve_b._save_state();
    }
    action _restore_state = {
        a._restore_state();
        b._restore_state();
        share._restore_state();
        total_shares._restore_state();
        reserve_a._restore_state();
        reserve_b._restore_state();
    }

    # Transaction wrapper for this contract
    action _execute_transaction = {
        local tx: function_identifier, _a: address, _b: bool, _i1: integer, _i2: integer, _i3: integer, _i4: integer, _i5: integer {
            env.begin_transaction(tx);
            _save_state();

            if tx = _share_id {
                _a:= share_id();
            }
            else if tx = _deposit {
                deposit(_a, _i1, _i2, _i3, _i4);
            } 
            else if tx = _swap {
                swap(_a, _b, _i1, _i2);
            }
            else if tx = _withdraw {
                (_i4, _i5) := withdraw(_a, _i1, _i2, _i3);
            }
            else if tx = _get_rsrvs {
                (_i1, _i2) := get_rsrvs();
            }
        }
        var restore: bool;
        restore := env.end_transaction();
        if restore {
            _restore_state();
        }
    }

    # FIXME: auto-generate this
    action __share_id = {
        env.begin_transaction(_share_id);
        _save_state();

        local a:address {
            a := share_id();
        }

        var restore: bool;
        restore := env.end_transaction();
        if restore {
            _restore_state();
        }
    }
    export __share_id

    action __deposit(depositor: address, desired_a: integer, min_a: integer, desired_b: integer, min_b: integer) = {
        env.begin_transaction(_deposit);
        _save_state();

        deposit(depositor, desired_a, min_a, desired_b, min_b);

        var restore: bool;
        restore := env.end_transaction();
        if restore {
            _restore_state();
        }
    }
    export __deposit 

    action __swap(to: address, buy_a: bool, out: integer, in_max: integer) = {
        env.begin_transaction(_swap);
        _save_state();

        swap(to, buy_a, out, in_max);

        var restore: bool;
        restore := env.end_transaction();
        if restore {
            _restore_state();
        }
    }
    export __swap

    action __withdraw(to: address, share_amount: integer, min_a: integer, min_b: integer)
      returns (out_a: integer, out_b: integer) = {
        env.begin_transaction(_withdraw);
        _save_state();

        (out_a, out_b) := withdraw(to, share_amount, min_a, min_b);

        var restore: bool;
        restore := env.end_transaction();
        if restore {
            _restore_state();
        }
    }
    export __withdraw

    action __get_rsrvs returns (res_a: integer, res_b: integer) = {
        env.begin_transaction(_get_rsrvs);
        _save_state();

        local res_a: integer, res_b: integer {
            (res_a, res_b) := get_rsrvs();
        }

        var restore: bool;
        restore := env.end_transaction();
        if restore {
            _restore_state();
        }
    }
    export __get_rsrvs

    # Contract invariants (that others can rely on)
    invariant [contract_address]
        env.contract_addresses(_this)
    invariant [reserves_are_set]
        reserve_a.is_set & reserve_b.is_set
    invariant [reserve_gte_zero]
        integer.gte(reserve_a.v, integer.zero) & integer.gte(reserve_b.v, integer.zero)
    invariant [total_shares_is_set]
        total_shares.is_set
    invariant [numerator_denominator_relation]
        residue_numerator ~= integer.zero & residue_denominator ~= integer.zero
        & integer.lt(residue_numerator, residue_denominator)
    invariant [admin_of_shares_contract]
        share.ad.a.is_set & l._this = share.ad.a.v
    invariant [no_allowance_on_token_share]
        forall AK:allowance_key.
            share.al.allowance.pre(AK) ->
                (AK.owner ~= _this
                | (AK.owner = _this & forall AV:allowance_value. share.al.allowance.map(AK, AV) -> AV.amount = integer.zero))
    invariant [no_allowance_on_token_a]
        forall AK:allowance_key.
            a.al.allowance.pre(AK) ->
                (AK.owner ~= _this
                | (AK.owner = _this & forall AV:allowance_value. a.al.allowance.map(AK, AV) -> AV.amount = integer.zero))
    invariant [no_allowance_on_token_b]
        forall AK:allowance_key.
            b.al.allowance.pre(AK) ->
                (AK.owner ~= _this
                | (AK.owner = _this & forall AV:allowance_value. b.al.allowance.map(AK, AV) -> AV.amount = integer.zero))
}
