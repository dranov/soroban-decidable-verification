#lang ivy1.8

include token_contract

individual auth_assertion_failed : bool

after init {
    auth_assertion_failed := false
}

action end_transaction_hook = {
    if ~(forall O, M, NM, A. ~env.tx_has_panicked
        & t.b.balance.map(O, NM) & t.b.balance._map(O, M)
        & integer.lt(NM, M) # O's balance has decreased
        & integer.minus(M, NM, A) # A is the amount transfered
        ->
        # either direct approvaql
        ((env.tx_identifier = _transfer & env.auth_required(O, t._this, _transfer)) |
         (env.tx_identifier = _burn & env.auth_required(O, t._this, _burn)))
        # or indirect approval
        | ((env.tx_identifier = _transfer_from | env.tx_identifier = _burn_from)
            & ((exists X. (env.auth_required(X, t._this, _transfer_from) |
                            env.auth_required(X, t._this, _burn_from))
                & env.historical_auth_required(O, t._this, _approve))))) {
        auth_assertion_failed := true;
    }
}

type function_identifier = {
    _initialize,
    _mint,
    _set_admin,
    _allowance,
    _approve,
    _balance,
    _spendable_balance,
    _transfer,
    _transfer_from,
    _burn,
    _burn_from
}
instance env : environment(function_identifier)
action panic = {
    call env.panic
}
# NOTE: order is important; this MUST be after env
instance t : token_contract

invariant [auth_assertion] ~auth_assertion_failed

# attribute method = convert_to_mypyvy