#lang ivy1.8

include soroban

instance money : integer

type allowance_key = struct {
    owner : address,
    spender : address
}

type allowance_value = struct {
    amount : money,
    expiration_ledger : ledger
}

# admin.rs
object ad = {
    instance a : singleton(address)
    action _save_state = {
        a._save_state()
    }
    action _restore_state = {
        a._restore_state()
    }

    action has_administrator returns (res : bool) = {
        res := a.has()
    }

    action read_administrator returns (res : address) = {
        res := a.get()
    }

    action write_administrator(new_admin : address) = {
        a.set(new_admin)
    }
}

# allowance.rs
object al = {
    # FIXME: this is temporary storage
    instance allowance : partial_map(allowance_key, allowance_value)
    action _save_state = {
        allowance._save_state()
    }
    action _restore_state = {
        allowance._restore_state()
    }

    action read_allowance(owner : address, spender : address) returns (res : allowance_value) = {
        local key: allowance_key, v: allowance_value {
            key.owner := owner;
            key.spender := spender;
            if allowance.has(key) {
                v := allowance.get(key);
                if v.expiration_ledger < env.get_ledger_sequence() {
                    v.amount := money.zero;
                    res := v
                } else {
                    res := v;
                }
            } else {
                    v.amount := money.zero;
                    v.expiration_ledger := 0;
                    res := v
            }
        }
    }

    action write_allowance(owner : address, spender : address, amount : money, expiration_ledger : ledger) = {
        local v: allowance_value {
            v.amount := amount;
            v.expiration_ledger := expiration_ledger;

            if money.gt(amount, money.zero) & expiration_ledger < env.get_ledger_sequence() {
                panic();
            }

            local key: allowance_key {
                key.owner := owner;
                key.spender := spender;
                # FIXME: model temporary storage
                allowance.set(key, v);

                if money.gt(amount, money.zero) {
                    # FIXME: model temporary storage
                    # bump entry TTL
                }
            }
        }
    }

    action spend_allowance(owner : address, spender : address, amount : money) = {
        local v: allowance_value {
            v := read_allowance(owner, spender);
            if money.lt(v.amount, amount) {
                panic();
            }
            write_allowance(owner, spender, money.sub(v.amount, amount), v.expiration_ledger);
        }
    }
}

# balance.rs
object b = {
    instance balance : partial_map(address, money)
    action _save_state = {
        balance._save_state()
    }
    action _restore_state = {
        balance._restore_state()
    }

    action read_balance(a : address) returns (res : money) = {
        if balance.has(a) {
            res := balance.get(a)
        } else {
            res := money.zero
        }
    }

    action write_balance(a : address, amount : money) = {
        balance.set(a, amount)
    }

    action receive_balance(a : address, amount : money) = {
        local balance : money {
            balance := read_balance(a);
            write_balance(a, money.add(balance, amount))
        }
    }

    action spend_balance(a : address, amount : money) = {
        local balance : money {
            balance := read_balance(a);
            if money.lt(balance, amount) {
                panic();
            }
            write_balance(a, money.sub(balance, amount))
        }
    }
}

# TODO: should the above (admin, al, b) be modules instead of objects?
# TODO: metadata.rs

# TODO: should we define a contract module?
object token = {
    individual _this : address
    after init {
        _this := env._register_contract();
    }

    action check_nonnegative_amount(amount : money) = {
        if money.lt(amount, money.zero) {
            panic()
        }
    }

    action initialize(admin: address) = {
        if ad.has_administrator() {
            panic()
        }
        ad.write_administrator(admin)
        # TODO: metadata
    }

    action mint(to : address, amount : money) = {
        check_nonnegative_amount(amount);
        local admin: address {
            admin := ad.read_administrator();
            env.require_auth(admin, _this, _mint);
            # FIXME: instance storage bump
            b.receive_balance(to, amount)
            # FIXME: env events
        }
    }

    action set_admin(new_admin : address) = {
        local admin: address {
            admin := ad.read_administrator();
            env.require_auth(admin, _this, _set_admin);
            # FIXME: instance storage bump
            ad.write_administrator(new_admin)
            # FIXME: env events
        }
    }

    #############
    # INTERFACE #
    #############
    action allowance(owner : address, spender : address) returns (res : money) = {
        # FIXME: instance storage bump
        local allowance : allowance_value {
            allowance := al.read_allowance(owner, spender);
            res := allowance.amount
        }
    }

    action approve(owner : address, spender : address, amount : money, expiration_ledger : ledger) = {  
        env.require_auth(owner, _this, _approve);
        check_nonnegative_amount(amount);
        # FIXME: instance storage bump
        al.write_allowance(owner, spender, amount, expiration_ledger)
        # FIXME: env events
    }

    action balance(id: address) returns (res: money) = {
        # FIXME: instance storage bump
        res := b.read_balance(id)
    }

    action spendable_balance(id: address) returns (res: money) = {
        # FIXME: instance storage bump
        res := b.read_balance(id)
    }

    action transfer(owner : address, to : address, amount : money) = {
        env.require_auth(owner, _this, _transfer);
        check_nonnegative_amount(amount);
        # FIXME: instance storage bump
        b.spend_balance(owner, amount);
        b.receive_balance(to, amount);
        # FIXME: env events
    }

    action transfer_from(spender : address, owner : address, to : address, amount : money) = {
        env.require_auth(spender, _this, _transfer_from);
        check_nonnegative_amount(amount);
        # FIXME: instance storage bump
        al.spend_allowance(owner, spender, amount);
        b.spend_balance(owner, amount);
        b.receive_balance(to, amount);
        # FIXME: env events
    }

    action burn(owner : address, amount : money) = {
        env.require_auth(owner, _this, _burn);
        check_nonnegative_amount(amount);
        # FIXME: instance storage bump
        b.spend_balance(owner, amount);
        # FIXME: env events
    }

    action burn_from(spender : address, owner : address, amount : money) = {
        env.require_auth(spender, _this, _burn_from);
        check_nonnegative_amount(amount);
        # FIXME: instance storage bump
        al.spend_allowance(owner, spender, amount);
        b.spend_balance(owner, amount);
        # FIXME: env events
    }

    # TODO: metadata: decimals, name, symbol
}

type function_identifier = {
    _initialize,
    _mint,
    _set_admin,
    _allowance,
    _approve,
    _balance,
    _spendable_balance,
    _transfer,
    _transfer_from,
    _burn,
    _burn_from
}
instance env : environment(function_identifier)
action panic = {
    call env.panic
}

# Objects: ad, al, b, token
action execute_transaction = {
    env.begin_transaction();
    # Save state
    ad._save_state();
    al._save_state();
    b._save_state();
    local tx: function_identifier, _a: address, _b: address, _c: address, _m: money, _l: ledger {
        if tx = _initialize {
            token.initialize(_a);
        } else if tx = _mint {
            token.mint(_a, _m);
            assert env.tx_has_panicked -> money.lt(_m, money.zero);
        } else if tx = _set_admin {
            token.set_admin(_a);
        } else if tx = _allowance {
            _m := token.allowance(_a, _b);
        } else if tx = _approve {
            token.approve(_a, _b, _m, _l);
        } else if tx = _balance {
            _m := token.balance(_a);
        } else if tx = _spendable_balance {
            _m := token.spendable_balance(_a);
        } else if tx = _transfer {
            token.transfer(_a, _b, _m);
        } else if tx = _transfer_from {
            token.transfer_from(_a, _b, _c, _m);
        } else if tx = _burn {
            token.burn(_a, _m);
        } else if tx = _burn_from {
            token.burn_from(_a, _b, _m);
        }


    # Assertions about authorization
    # (1) All balance-decreasing operations require authorization
    assert b.balance.map(O, NM) & b.balance._map(O, M)
        & money.lt(NM, M) # O's balance has decreased
     -> (env.tx_has_panicked
        | (exists F. env.auth_required(O, token._this, F))
        | (exists X. (env.auth_required(X, token._this, _transfer_from) |
            env.auth_required(X, token._this, _burn_from))));

    # (2) transfer_from and burn_from have been previously approved
    # and authorized by the owner of the balance
    assert ~env.tx_has_panicked
        & b.balance.map(O, NM) & b.balance._map(O, M)
        & money.lt(NM, M) # O's balance has decreased
        & money.minus(M, NM, A) # A is the amount transfered
        & (tx = _transfer_from | tx = _burn_from)
        -> ((exists X. (env.auth_required(X, token._this, _transfer_from) |
                        env.auth_required(X, token._this, _burn_from))
            & env.historical_auth_required(O, token._this, _approve)) # there was an approval
            # FIXME: this doesn't work; we should make Ivy print post-states
            # with trace=true to make it easier to debug what's going on
            # & (forall AK:allowance_key, AV:allowance_value, NAV:allowance_value.
            #     al.allowance.map(AK, NAV) & al.allowance._map(AK, AV)
            #     & AK.owner = O # there was an allowance from O
            #     # NOTE: if we want to say allowance from O to X, no longer in FAU
            #     & money.gte(AV.amount, A) # allowance was sufficient
            #     & money.minus(AV.amount, NAV.amount, A) # and decreases by the amount transfered (A)
            #  )
        );
    }

    # Restore state; TODO: specification of restore
    var restore: bool;
    restore := env.end_transaction();
    if restore {
        ad._restore_state();
        al._restore_state();
        b._restore_state();
        assert b.balance.pre(X) = (old b.balance.pre(X));
        assert b.balance.map(X, Y) = (old b.balance.map(X, Y));
    }
}
export execute_transaction

invariant [all_balances_positive]
    forall A, V.
        b.balance.pre(A) & b.balance.map(A, V) -> money.gte(V, money.zero)

invariant [all_allowances_positive]
    forall AK:allowance_key, AV:allowance_value.
        al.allowance.pre(AK) & al.allowance.map(AK, AV) -> money.gte(AV.amount, money.zero)

invariant [allowance_implies_authorization]
    forall AK:allowance_key, AV:allowance_value.
        al.allowance.pre(AK) & al.allowance.map(AK, AV) & money.gt(AV.amount, money.zero)
        -> env.historical_auth_required(AK.owner, token._this, _approve)
