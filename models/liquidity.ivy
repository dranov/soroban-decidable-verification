#lang ivy1.8

include liquidity_contract

type function_identifier = {
    _initialize,
    _share_id,
    _deposit,
    _swap,
    _withdraw,
    _get_rsrvs,

    _mint,
    _set_admin,
    _allowance,
    _approve,
    _balance,
    _spendable_balance,
    _transfer,
    _transfer_from,
    _burn,
    _burn_from
}
instance env : environment(function_identifier)
action panic = {
    call env.panic
}
# IMPORTANT: this must be instantiated after env, such that
# env's initializer runs first.
instance l : liquidity_contract

## Ghost state for modelling [NoDepositorLoss]
individual depositor_addr: address
individual depositor_deposited: bool
individual depositor_withdrew: bool

# Ghost state set in l.deposit(), used to snapshot the deposit amount
individual _ghost_minted_shares: integer
# Ghost state set in l.withdraw(), used to snapshot the withdraw amount
individual _ghost_burned_shares: integer
individual _ghost_amount_a: integer
individual _ghost_amount_b: integer

# Snapshot when "the" deposit happens
instance _depositor_shares: singleton(integer)
instance _a0: singleton(integer)
instance _b0: singleton(integer)
# and when the withdrawal happens
instance _a1: singleton(integer)
instance _b1: singleton(integer)

after init {
    # depositor_addr left unspecified
    depositor_deposited := false;
    depositor_withdrew := false;

    # Ghost state recorded in the contract code
    _ghost_minted_shares := integer.zero;
    _ghost_burned_shares := integer.zero;
    _ghost_amount_a := integer.zero;
    _ghost_amount_b := integer.zero;
}

# Invariants for the ghost state
invariant [deposited_imp_captured]
    depositor_deposited ->
        _depositor_shares.is_set & _a0.is_set & _b0.is_set
        # &  env.historical_auth_required(depositor_addr, l._this, _deposit)
invariant [withdrew_imp_captured]
    depositor_withdrew ->
        _a1.is_set & _b1.is_set
        # &  env.historical_auth_required(depositor_addr, l._this, _withdraw)
invariant [withdrew_imp_deposited]
    depositor_withdrew -> depositor_deposited

action has_interacted_with_lp(addr: address) returns (b: bool) = {
    b := env.historical_auth_required(addr, l._this, _deposit)
        | env.historical_auth_required(addr, l._this, _withdraw)
        | env.historical_auth_required(addr, l._this, _swap);
}

action end_transaction_hook = {
    # Is the depositor depositing?
    if ~env.tx_has_panicked
    & env.auth_required(depositor_addr, l._this, _deposit) {
        # Depositor cannot deposit twice
        if depositor_deposited {
            panic()
        }

        # Non-deterministically choose whether this is "the" deposit
        # local deposit_now: bool {
        #     if deposit_now {
        depositor_deposited := true;
        # Snapshot what gets deposited
        _depositor_shares.set(_ghost_minted_shares);
        _a0.set(_ghost_amount_a);
        _b0.set(_ghost_amount_b);
            # }
        # }
    }

    # Has the depositor withdrawn?
    if ~env.tx_has_panicked & depositor_deposited & ~depositor_withdrew
    & env.auth_required(depositor_addr, l._this, _withdraw) {
        # amount withdrawn should be equal to amount deposited
        if ~(_ghost_burned_shares = _depositor_shares.v) {
            panic();
        }

        depositor_withdrew := true;
        # Snapshot what gets withdrawn
        _a1.set(_ghost_amount_a);
        _b1.set(_ghost_amount_b);
    }

    # Once deposited and withdrew, stop all activity from depositor
    # (to make stating properties easier)
    if depositor_deposited & depositor_withdrew
    & (exists C, F. env.auth_required(depositor_addr, C, F)) {
        panic();
    }
}

invariant [distinct_addresses] 
    l._this ~= l.a._this
    & l._this ~= l.b._this
    & l._this ~= l.share._this
    & l.a._this ~= l.b._this
    & l.a._this ~= l.share._this
    & l.b._this ~= l.share._this

# This is an interesting property, because it is only true if the
# LiquidityPool contract itself cannot own and withdraw pool shares.
# In that situation, withdrawing shares reduces the reserves,
# but doesn't actually change the balance of tokens.
# NOTE: this holds if people don't randomly transfer tokens to the LP.
# invariant [reserve_a_equals_balance]
#     (l.a.b.balance.pre(l._this) & l.a.b.balance.map(l._this, l.reserve_a.v))
#     | (~l.a.b.balance.pre(l._this) & l.reserve_a.v = integer.zero)

# You can have a larger balance than the reserve, but not a smaller one.
# (Larger because someone transfers the LP contract tokens outside of a deposit.)
invariant [reserve_a_lte_balance]
    (l.a.b.balance.pre(l._this) & (forall V. l.a.b.balance.map(l._this, V) -> integer.lte(l.reserve_a.v, V)))
    | (~l.a.b.balance.pre(l._this) & l.reserve_a.v = integer.zero)
invariant [reserve_b_lte_balance]
    (l.b.b.balance.pre(l._this) & (forall V. l.b.b.balance.map(l._this, V) -> integer.lte(l.reserve_b.v, V)))
    | (~l.b.b.balance.pre(l._this) & l.reserve_b.v = integer.zero)

# Property [NoDepositorLoss], i.e. one of the following is true:
# if A1 <= A0: A0 - A1 <= (B1 - B0) * (A1 / B1), or
# if B1 <= B0: B0 - B1 <= (A1 - A0) * (B1 / A1), or
# A0 <= A1 & B0 <= B1
invariant [no_depositor_loss]
    (_a0.is_set & _b0.is_set & _a1.is_set & _b1.is_set)
    ->
    (integer.lte(_a1.v, _a0.v) & (forall DA, DB, DIV, MUL.
        integer.minus(_a0.v, _a1.v, DA) & integer.minus(_b1.v, _b0.v, DB)
        & integer.divi(_a1.v, _b1.v, DIV) & integer.mult(DB, DIV, MUL)
        -> integer.lte(DA, MUL)))
    |
    (integer.lte(_b1.v, _b0.v) & (forall DA, DB, DIV, MUL.
        integer.minus(_b0.v, _b1.v, DB) & integer.minus(_a1.v, _a0.v, DA)
        & integer.divi(_b1.v, _a1.v, DIV) & integer.mult(DA, DIV, MUL)
        -> integer.lte(DB, MUL)))
    |
    (integer.lte(_a0.v, _a1.v) & integer.lte(_b0.v, _b1.v))
# (A1 <= A0), (B1 <= B0), and (A0 <= A1 & B0 <= B1) cover all cases.

# SCENARIO
# (1) Deposit and immediately withdraw -- [no_depositor_loss] should hold
action deposit_and_immediately_withdraw(depositor: address) = {
    local share_amount: integer {
        # (1) Deposit
        env.begin_transaction(_deposit);
        l._save_state();

        local desired_a: integer, min_a: integer, desired_b: integer, min_b: integer {
            l.deposit(depositor, desired_a, min_a, desired_b, min_b);
            share_amount := _ghost_minted_shares;
        }

        require ~env.tx_has_panicked;
        var restore: bool;
        restore := env.end_transaction();
        if restore {
           l._restore_state();
        }

        # (2) Withdraw
        env.begin_transaction(_withdraw);
        l._save_state();

        local min_a: integer, min_b: integer, out_a: integer, out_b: integer {
            (out_a, out_b) := l.withdraw(depositor, share_amount, min_a, min_b);
        }

        require ~env.tx_has_panicked;
        var restore: bool;
        restore := env.end_transaction();
        if restore {
            l._restore_state();
        }
    }
}
export deposit_and_immediately_withdraw

# attribute method = convert_to_mypyvy